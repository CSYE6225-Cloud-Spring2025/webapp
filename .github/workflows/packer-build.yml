name: Packer build and create machine image

on:
  pull_request:
    branches:
      - main

env:
  PACKER_LOG: "1"

jobs:
  build-machine-image:
    name: packer build and create machine image
    runs-on: ubuntu-latest

    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install packer
        uses: hashicorp/setup-packer@v2

      - name: Make all scripts executable
        run: chmod +x packer/*.sh

      - name: Initialize packer
        run: packer init ./packer

      - name: Configure AWS key and password
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{secrets.AWS_KEY}}
          aws-secret-access-key: ${{secrets.AWS_PASSWORD}}
          aws-region: ${{vars.aws_region}}

      - name: Build machine image
        run: |
          cd packer
          packer build \
            -var "aws_region=${{vars.AWS_REGION}}" \
            -var "aws_instance_type=${{vars.AWS_INSTANCE_TYPE}}" \
            -var "aws_source_ami=${{secrets.AWS_SOURCE_AMI}}" \
            -var "ssh_username=${{vars.SSH_USERNAME}}" \
            -var "aws_subnet_id=${{secrets.AWS_SUBNET_ID}}" \
            -var "aws_demo_account=${{secrets.AWS_DEMO_ACCOUNT}}" \
            -var "APP_GROUP=${{vars.APP_GROUP}}" \
            -var "APP_USER=${{vars.APP_USER}}" \
          .
          
          
          # AMI_ID=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d: -f2)
          # echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV

          # Debug - list directory contents to find manifest file
          echo "Contents of packer directory:"
          ls -la
          
          # Check if manifest.json exists and display its content
          if [ -f "manifest.json" ]; then
            echo "Found manifest.json, contents:"
            cat manifest.json
            
            # Extract AMI ID from manifest.json
            AMI_ID=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d ":" -f2)
            echo "Extracted AMI_ID: $AMI_ID"
          else
            # Try to find manifest file in a different location
            MANIFEST_FILE=$(find . -name "manifest.json" | head -1)
            if [ -n "$MANIFEST_FILE" ]; then
              echo "Found manifest at $MANIFEST_FILE, contents:"
              cat "$MANIFEST_FILE"
              
              # Extract AMI ID from found manifest file
              AMI_ID=$(jq -r '.builds[-1].artifact_id' "$MANIFEST_FILE" | cut -d ":" -f2)
              echo "Extracted AMI_ID: $AMI_ID"
            else
              echo "Error: Cannot find manifest.json file"
              exit 1
            fi
          fi
          
          # Validate AMI ID format
          if [[ ! "$AMI_ID" =~ ^ami-[a-z0-9]+$ ]]; then
            echo "Error: Invalid AMI ID format: $AMI_ID"
            exit 1
          fi
          
          # Set the environment variable for subsequent steps
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV

      - name: Switch to demo account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{secrets.DEMO_AWS_KEY}}
          aws-secret-access-key: ${{secrets.DEMO_AWS_SECRET}}
          aws-region: ${{vars.aws_region}}

      - name: Get current launch template
        run: |
          LAUNCH_TEMPLATE_ID=$(aws ec2 describe-launch-templates --filters "Name=launch-template-name,Values=${{vars.LAUNCH_TEMPLATE_NAME}}" \
            --query "LaunchTemplates[0].LaunchTemplateId" --output text)
            
          echo "LAUNCH_TEMPLATE_ID=$LAUNCH_TEMPLATE_ID" >> $GITHUB_ENV

      - name: Create a new version of the launch template with AMI
        run: |
          LAUNCH_TEMPLATE_VERSION=$(aws ec2 create-launch-template-version --launch-template-id $LAUNCH_TEMPLATE_ID \
            --source-version '$Latest' --launch-template-data '{"ImageId":"'$AMI_ID'"}' \
            --query "LaunchTemplateVersion.VersionNumber" --output text)
            
          echo "Created launch template version: $LAUNCH_TEMPLATE_VERSION"
          echo "LAUNCH_TEMPLATE_VERSION=$LAUNCH_TEMPLATE_VERSION" >> $GITHUB_ENV
      
      - name: Refresh auto-scaling group instance
        run: |
          ASG_REFRESH_ID=$(aws autoscaling start-instance-refresh --auto-scaling-group-name ${{vars.AUTOSCALING_GROUP_NAME}} \
            --query "InstanceRefreshId" --preferences '{"MinHealthyPercentage": 30, "InstanceWarmup": 300}' --output text)
            
          echo "Started instance refresh with ID: $ASG_REFRESH_ID"
          echo "ASG_REFRESH_ID=$ASG_REFRESH_ID" >> $GITHUB_ENV

      - name: Check if auto-scaling group refresh completed
        run: |
          while true
          do
            REFRESH_STATUS=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name ${{vars.AUTOSCALING_GROUP_NAME}} \
              --instance-refresh-ids $ASG_REFRESH_ID --query "InstanceRefreshes[0].Status" --output text)
            
            if [ "$REFRESH_STATUS" = "Successful" ]
            then
              echo "Refreshed auto-scaling group with new template successfully"
              exit 0
            elif [ "$REFRESH_STATUS" = "InProgress" ] || [ "$REFRESH_STATUS" = "Pending" ]
            then
              echo "Auto-scaling group instance refresh still in progress..."
              sleep 45
            else
              echo "Refresh auto-scaling group with new template failed: $REFRESH_STATUS"
              exit 1
            fi
          done